package io.netifi.testing.integration;

@javax.annotation.Generated(
    value = "by Proteus proto compiler (version 0.2.3)",
    comments = "Source: test.proto")
public final class TestServiceServer extends io.netifi.proteus.AbstractProteusService {
  private final TestService service;

  public TestServiceServer(TestService service) {
    this.service = service;
  }

  @java.lang.Override
  public int getNamespaceId() {
    return TestService.NAMESPACE_ID;
  }

  @java.lang.Override
  public int getServiceId() {
    return TestService.SERVICE_ID;
  }

  @java.lang.Override
  public reactor.core.publisher.Mono<Void> fireAndForget(io.rsocket.Payload payload) {
    try {
      io.netty.buffer.ByteBuf metadata = payload.sliceMetadata();
      switch(io.netifi.proteus.frames.ProteusMetadata.methodId(metadata)) {
        case TestService.METHOD_EMPTY_CALL: {
          io.netty.buffer.ByteBufInputStream bis = new io.netty.buffer.ByteBufInputStream(payload.sliceData());
          return service.emptyCall(io.netifi.testing.integration.Test.SimpleRequest.parseFrom(bis));
        }
        default: {
          return reactor.core.publisher.Mono.error(new UnsupportedOperationException());
        }
      }
    } catch (Throwable t) {
      return reactor.core.publisher.Mono.error(t);
    } finally {
      payload.release();
    }
  }

  @java.lang.Override
  public reactor.core.publisher.Mono<io.rsocket.Payload> requestResponse(io.rsocket.Payload payload) {
    try {
      io.netty.buffer.ByteBuf metadata = payload.sliceMetadata();
      switch(io.netifi.proteus.frames.ProteusMetadata.methodId(metadata)) {
        case TestService.METHOD_UNARY_CALL: {
          com.google.protobuf.ByteString data = com.google.protobuf.UnsafeByteOperations.unsafeWrap(payload.sliceData().nioBuffer());
          return service.unaryCall(io.netifi.testing.integration.Test.SimpleRequest.parseFrom(data)).map(serializer);
        }
        default: {
          return reactor.core.publisher.Mono.error(new UnsupportedOperationException());
        }
      }
    } catch (Throwable t) {
      return reactor.core.publisher.Mono.error(t);
    } finally {
      payload.release();
    }
  }

  @java.lang.Override
  public reactor.core.publisher.Flux<io.rsocket.Payload> requestStream(io.rsocket.Payload payload) {
    try {
      io.netty.buffer.ByteBuf metadata = payload.sliceMetadata();
      switch(io.netifi.proteus.frames.ProteusMetadata.methodId(metadata)) {
        case TestService.METHOD_STREAMING_OUTPUT_CALL: {
          io.netty.buffer.ByteBufInputStream data = new io.netty.buffer.ByteBufInputStream(payload.sliceData());
          return service.streamingOutputCall(io.netifi.testing.integration.Test.StreamingOutputCallRequest.parseFrom(data)).map(serializer);
        }
        default: {
          return reactor.core.publisher.Flux.error(new UnsupportedOperationException());
        }
      }
    } catch (Throwable t) {
      return reactor.core.publisher.Flux.error(t);
    } finally {
      payload.release();
    }
  }

  @java.lang.Override
  public reactor.core.publisher.Flux<io.rsocket.Payload> requestChannel(io.rsocket.Payload payload, reactor.core.publisher.Flux<io.rsocket.Payload> publisher) {
    try {
      io.netty.buffer.ByteBuf metadata = payload.sliceMetadata();
      switch(io.netifi.proteus.frames.ProteusMetadata.methodId(metadata)) {
        case TestService.METHOD_STREAMING_INPUT_CALL: {
          reactor.core.publisher.Flux<io.netifi.testing.integration.Test.StreamingInputCallRequest> messages =
            publisher.map(deserializer(io.netifi.testing.integration.Test.StreamingInputCallRequest.parser()));
          return service.streamingInputCall(messages).map(serializer).flux();
        }
        case TestService.METHOD_FULL_BIDI_CALL: {
          reactor.core.publisher.Flux<io.netifi.testing.integration.Test.StreamingOutputCallRequest> messages =
            publisher.map(deserializer(io.netifi.testing.integration.Test.StreamingOutputCallRequest.parser()));
          return service.fullBidiCall(messages).map(serializer);
        }
        case TestService.METHOD_HALF_BIDI_CALL: {
          reactor.core.publisher.Flux<io.netifi.testing.integration.Test.StreamingOutputCallRequest> messages =
            publisher.map(deserializer(io.netifi.testing.integration.Test.StreamingOutputCallRequest.parser()));
          return service.halfBidiCall(messages).map(serializer);
        }
        default: {
          return reactor.core.publisher.Flux.error(new UnsupportedOperationException());
        }
      }
    } catch (Throwable t) {
      return reactor.core.publisher.Flux.error(t);
    }
  }

  @java.lang.Override
  public reactor.core.publisher.Flux<io.rsocket.Payload> requestChannel(org.reactivestreams.Publisher<io.rsocket.Payload> payloads) {
    return new io.rsocket.internal.SwitchTransform<io.rsocket.Payload, io.rsocket.Payload>(payloads, new java.util.function.BiFunction<io.rsocket.Payload, reactor.core.publisher.Flux<io.rsocket.Payload>, org.reactivestreams.Publisher<? extends io.rsocket.Payload>>() {
      @java.lang.Override
      public org.reactivestreams.Publisher<io.rsocket.Payload> apply(io.rsocket.Payload payload, reactor.core.publisher.Flux<io.rsocket.Payload> publisher) {
        return requestChannel(payload, publisher);
      }
    });
  }

  private static final java.util.function.Function<com.google.protobuf.MessageLite, io.rsocket.Payload> serializer =
    new java.util.function.Function<com.google.protobuf.MessageLite, io.rsocket.Payload>() {
      @java.lang.Override
      public io.rsocket.Payload apply(com.google.protobuf.MessageLite message) {
        try {
          io.netty.buffer.ByteBuf byteBuf = io.netty.buffer.ByteBufAllocator.DEFAULT.directBuffer();
          io.netty.buffer.ByteBufOutputStream bos = new io.netty.buffer.ByteBufOutputStream(byteBuf);
          message.writeTo(bos);
          return io.rsocket.util.ByteBufPayload.create(byteBuf);
        } catch(Throwable t) {
          throw new RuntimeException(t);
        }
      }
    };

  private static <T> java.util.function.Function<io.rsocket.Payload, T> deserializer(final com.google.protobuf.Parser<T> parser) {
    return new java.util.function.Function<io.rsocket.Payload, T>() {
      @java.lang.Override
      public T apply(io.rsocket.Payload payload) {
        try {
          io.netty.buffer.ByteBufInputStream bis = new io.netty.buffer.ByteBufInputStream(payload.sliceData());
          return parser.parseFrom(bis);
        } catch (Throwable t) {
          throw new RuntimeException(t);
        } finally {
          payload.release();
        }
      }
    };
  }
}
